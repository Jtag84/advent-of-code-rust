use adv_code::year<YEAR>::day<DAY>::lib::parser::parse_input;
use adv_code::*;
use anyhow::*;
use itertools::Itertools;
use std::iter::zip;
use code_timing_macros::time_snippet;

const INPUT_FILE: &str = "input/<YEAR>/<DAY>/inputs.txt";

fn main() -> Result<()> {
    start_day(<YEAR>, <DAY>, <PART_NUMBER>);

    let result = time_snippet!(part<PART_NUMBER>(INPUT_FILE));
    println!("Result = {}", result);

    assert_eq!(result, 1);

    Ok(())
}

fn part<PART_NUMBER>(file_input_path: &str) -> isize {
    let parsed = parse_input(&file_input_path);
    0
}

#[cfg(test)]
mod test {
    use adv_code::year<YEAR>::day<DAY>::lib::parser::parse_input;
    use crate::part<PART_NUMBER>;

    const TEST_INPUT_FILE: &str = "input/<YEAR>/<DAY>/test_inputs_part<PART_NUMBER>.txt";

    #[test]
    fn part<PART_NUMBER>_test() {
        assert_eq!(part<PART_NUMBER>(TEST_INPUT_FILE), 1);
    }

    #[test]
    fn test_parser() {
        let parsed = parse_input(TEST_INPUT_FILE);
        println!("Result = {:?}", parsed);
    }
}